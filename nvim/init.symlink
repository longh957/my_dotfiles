"""""""""""
"NVIM PLUG"
"""""""""""

" brew install python3
" pip2 install neovim
" pip3 install neovim
" install rbenv ctags
" mkdir -p ~/.rbenv/plugins
" git clone git://github.com/tpope/rbenv-ctags.git \
"   ~/.rbenv/plugins/rbenv-ctags
" rbenv ctags
"gem install gem-ctags
" gem ctags
" Automatic install of vim-plug
if empty(glob('~/.config/nvim/plugged'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.config/nvim/plugged')
" Make sure you use single quotes
" Theme Plugins
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'altercation/vim-colors-solarized'
" Files
Plug 'ctrlpvim/ctrlp.vim'
Plug 'sjl/gundo.vim'
Plug 'rking/ag.vim'
Plug 'editorconfig/editorconfig-vim'
" Plug 'scrooloose/syntastic'
" Git Plugins
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv'
Plug 'airblade/vim-gitgutter'
" Movement
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'wesQ3/vim-windowswap'
" Javascript
Plug 'jelera/vim-javascript-syntax'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
" Rails
Plug 'mustache/vim-mustache-handlebars'
" Plug 'tpope/vim-rails'
" Plug 'vim-ruby/vim-ruby'
Plug 'slim-template/vim-slim'
" Plug 'tpope/vim-bundler'
" Elixir Plugins
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'mattreduce/vim-mix'
Plug 'fholgado/minibufexpl.vim'
" Misc
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'pbrisbin/vim-mkdir'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-endwise'
Plug 'unblevable/quick-scope'
Plug 'ervandew/supertab'
Plug 'tomtom/tcomment_vim'
Plug 'wincent/terminus'
Plug 'benekastah/neomake', { 'on': ['Neomake'] }
" Ruby syntax (plays nicely with tpope/rbenv-ctags)
Plug 'vim-ruby/vim-ruby'
" Slim syntax
Plug 'slim-template/vim-slim'
" Haml syntax
Plug 'tpope/vim-haml'
" Rails support (:A, :R, :Rmigration, :Rextract)
Plug 'tpope/vim-rails', { 'for': ['ruby', 'eruby', 'haml', 'slim'] }
" Bundler support (play nicely with tpope/gem-ctags)
Plug 'tpope/vim-bundler', { 'for': ['ruby', 'eruby', 'haml', 'slim'] }
" String interpolation helper
Plug 'p0deje/vim-ruby-interpolation', { 'for': ['ruby'] }
" ---------------------------------------------------------------------------------------------------------------------
" HTML/CSS
" ---------------------------------------------------------------------------------------------------------------------

" HTML5 syntax
Plug 'othree/html5.vim'
" SCSS syntax
Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }
" CSS color highlighter
Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'sass', 'scss', 'less'] }
" Angular 2
" Plug 'magarcia/vim-angular2-snippets'
" Plug 'leafgarland/typescript-vim'
" " Lightline (simple status line)
Plug 'itchyny/lightline.vim'

"atags
Plug 'fntlnz/atags.vim'

call plug#end()
"""""""""""""""
"LOOK AND FEEL"
"""""""""""""""
syntax on "Syntax highlighting
set background=dark
colorscheme smyck "Colorscheme to pick

set gfn=Menlo\ for\ Powerline:h14 "Font settings for OSX
"Set font for Windows
if has("gui_running") && exists("$COMSPEC")
    set gfn=Consolas:h11
endif
"256 Color temrinal support
set t_Co=256

filetype plugin indent on "Filetype highlighting
set title "Show filename in titlebar
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
set ruler "Set Ruler
"Enable hybrid number mode
set relativenumber
set number "Line numbers on

set nowrap "Line wrapping off
set cursorline "Highlights current line
set scrolloff=5 "Number of lines to below cursor to start auto scroll
"set list!
set listchars=tab:▸\ ,eol:¬

"set statusline=2 "Always show the statusline
set statusline+=%{fugitive#statusline()} "Fugitive status line
set laststatus=2 "Show statusline

set foldenable " enable code folding
set foldmethod=indent "Enable code folding - za to code fold
set foldlevel=99 "Enable code folding

set bs=2 "Backspace overrides anything in INSERT mode
set ttyfast "Better scrolling
set noerrorbells "No noise

"Tab completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:SuperTabCrMapping = 0
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-n>"
 autocmd FileType *
     \ if &omnifunc != '' |
     \     call SuperTabChain(&omnifunc, '<c-p>') |
     \ endif
set completeopt=menuone,longest,preview

"Tab spacing
set tabstop=2
set shiftwidth=2
set expandtab "convert tabs to whitepsace
set softtabstop=2 "Make backspace go back 4 spaces

"If you want the tab settings to be based on a per file-type basis use the the following:
"autocmd FileType * set tabstop=2|set shiftwidth=2|set noexpandtab
autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab

set colorcolumn=100 "Mark colum 80

" Support for es6
autocmd BufRead,BufNewFile *.es6 setfiletype javascript
let g:jsx_ext_required = 1 " Allow JSX in normal JS files

"List of files to ignore
source ~/.vim/ignore.vim

"""""""""""""""
"KEY BINDINGS"
"""""""""""""""
let mapleader=','
"Toggle visible tab/trailing space with ,l
nmap <silent> <leader>l :set list!<CR>
"Remape keys to navigate windows use Ctrl+key
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
"Remap keys to copy and paste using clipboard
vmap <leader>c y:call system("pbcopy", getreg("\""))<CR>
nmap <leader>v :call setreg("\"",system("pbpaste"))<CR>p
"Remap keys to go forward and back on buffer
nmap <Right> :bnext<CR>
nmap <Left> :bprev<CR>
"Open gundo
map <leader>g :GundoToggle<CR>
let g:pep8_map='<leader>8' "Pep 8 keybinding
"ag bindings
nnoremap <leader>a :Ag
"Insert a comment
map <F5> :TComment<CR>
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"Allow using . to repeat entire maps
silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R --exclude=*.min.js --exclude=wforms.js . <CR>


"ATags
" let g:atags_build_commands_list = [
"     \"ctags -R -f tags.tmp",
"     \"awk 'length($0) < 400' tags.tmp > tags",
"     \"rm tags.tmp"
"     \]

let g:atags_build_commands_list = [
    \ 'ag -g "" | ctags -L - --fields=+l -f tags.tmp',
    \ 'awk "length($0) < 400" tags.tmp > tags',
    \ 'rm tags.tmp'
    \ ]

map <Leader>at :call atags#generate()<cr>
" autocmd BufWritePost * call atags#generate()

" Terminal Settings
:au BufEnter * if &buftype == 'terminal' | :startinsert | endif

" Window split settings
highlight TermCursor ctermfg=red guifg=red
set splitbelow
set splitright

" Terminal settings
tnoremap <Leader><ESC> <C-\><C-n>

" Window navigation function
" Make ctrl-h/j/k/l move between windows and auto-insert in terminals
func! s:mapMoveToWindowInDirection(direction)
    func! s:maybeInsertMode(direction)
        stopinsert
        execute "wincmd" a:direction

        if &buftype == 'terminal'
            startinsert!
        endif
    endfunc

    execute "tnoremap" "<silent>" "<C-" . a:direction . ">"
                \ "<C-\\><C-n>"
                \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
    execute "nnoremap" "<silent>" "<C-" . a:direction . ">"
                \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
endfunc
for dir in ["h", "j", "l", "k"]
    call s:mapMoveToWindowInDirection(dir)
endfor
"""""""""""""""""""
"Misc Options
"""""""""""""""""""
set hidden

set nobackup       "no backup files
set nowritebackup  "only in case you don't want a backup file while editing
set noswapfile     "no swap files
set autoread "Automatically reload files on changes

set timeoutlen=250 "Time to wait after ESC (default causes an annoying delay)
set history=256

" EJS
au BufNewFile,BufRead *.ejs set filetype=html

"Ctags options
set tags+=gems.tags,./tags,tags

set diffopt+=vertical "Fugitive option to open diffs in vertical split
set diffopt+=iwhite " Ignore whitespace when using vimdiff

"""""""""""""""""""
" Search Options
"""""""""""""""""""
set ignorecase "Case insensitive search
set hlsearch "Highlight search terms
"disable highlighted searched terms
:nmap \q :nohlsearch<CR>
set incsearch "Highlight as term is being typed
set smartcase "Case sensitive search if theres a capital letter in search string

set shortmess=atI "Reduces prompts check :help shortmess for more info
set wildmenu "Show more than 1 item for tab completion
set wildmode=list:longest  "Tab completes up to point of ambiguity
set encoding=utf-8 "Set encoding type

let g:ag_working_path_mode="r" "AG search starts at project root

" Add support for virtualenv code completion
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

" -----------------------------------------------------
" 3.7 Custom commands and functions
" -----------------------------------------------------

" Generate tags definitions
command! GenerateCT :call utils#generateCtags()
command! GenerateRubyCT :call utils#generateRubyCtags()

" -----------------------------------------------------
" 4.7 Lightline settings
" -----------------------------------------------------
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"R":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
      \ },
      \ 'component_function': {
      \   'filename': 'LightLineFilename',
      \   'fugitive': 'LightLineFugitive'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '▶', 'right': '◀' }
      \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "🔒"
  else
    return ""
  endif
endfunction

function! LightLineFilename()
"  return expand('%:p')
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? '⎇  ' .branch : ''
  endif
  return ''
endfunction
"\   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
" -----------------------------------------------------
" 4.9 Neomake settings
" -----------------------------------------------------
let g:neomake_verbose=0
let g:neomake_warning_sign = {
      \ 'text': '💩',
      \ 'texthl': 'WarningMsg',
      \ }
let g:neomake_error_sign = {
      \ 'text': '❌',
      \ 'texthl': 'ErrorMsg',
      \ }
autocmd BufNewFile,BufRead *.slim setlocal filetype=slim
" -----------------------------------------------------
" 7.1 Run linters after save
" -----------------------------------------------------

" npm install -g eslint
autocmd BufWritePost *.js Neomake eslint
" gem install rubocop
autocmd BufWritePost *.rb Neomake rubocop
" apt-get install tidy or brew install tidy-html5
autocmd BufWritePost *.html Neomake tidy
" gem install scss_lint
autocmd BufWritePost *.scss Neomake scsslint
" apt-get install shellcheck or brew install shellcheck
autocmd BufWritePost *.sh Neomake shellcheck
" pip3 install vim-vint
autocmd BufWritePost *.vim Neomake vint
"gem  install slim_lint
" autocmd BufWritePost *.slim Neomake slim-lint
"}}}
"
"" Command-line config{{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Bash like
cnoremap <C-A>    <Home>
cnoremap <C-E>    <End>
cnoremap <C-K>    <C-U>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

""""""""""""""""""""""
" Plugins Configurations
""""""""""""""""""""""
" source ~/.vim/plugins/syntastic.vim
" source ~/.vim/plugins/airline.vim
source ~/.vim/plugins/nerdtree.vim

"""""""""""""""""""""
" Functions
"""""""""""""""""""""
source ~/.vim/functions/strip-whitespace.vim
source ~/.vim/functions/vim-at.vim
source ~/.vim/functions/quickscope.vim
source ~/.vim/functions/next-close-fold.vim

" Local config
" if filereadable($HOME . "/.vimrc.local")
"   source ~/.vimrc.local
"
